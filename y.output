Terminals unused in grammar

    T_OROR
    T_ANDAND
    T_LEFTSHIFT
    T_RIGHTSHIFT
    T_PRINTLN
    T_STRING
    T_BOOLEAN
    T_PRINTFF
    T_SCANFF
    T_TRUE
    T_FALSE
    T_CASE
    T_SWITCH
    T_DEFAULT


Grammar

    0 $accept: START $end

    1 START: PROG

    2 $@1: ε

    3 START: T_INCLUDE '<' T_HEADER $@1 '>' PROG

    4 PROG: MAIN PROG
    5     | DECLR ';' PROG
    6     | ASSGN ';' PROG
    7     | ε

    8 DECLR: TYPE LISTVAR

    9 LISTVAR: LISTVAR ',' VAR
   10        | VAR

   11 VAR: ASSGN
   12    | T_ID
   13    | T_ID '[' EXPR ']' DIMS

   14 DIMS: '[' EXPR ']' DIMS
   15     | ε

   16 TYPE: T_INT
   17     | T_FLOAT
   18     | T_DOUBLE
   19     | T_CHAR
   20     | T_VOID

   21 ASSGN: T_ID '=' EXPR
   22      | T_ID '=' UNARYEXPR
   23      | T_ID '[' EXPR ']' DIMS '=' EXPR
   24      | T_ID '[' EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID '[' EXPR ']' DIMS '=' ARRDEF
   26      | T_ID T_SQBRACK '=' ARRDEF

   27 ARRELEM: EXPR ',' ARRELEM
   28        | EXPR
   29        | ε

   30 ARRDEF: '{' ARRELEM '}'

   31 UNARYEXPR: T_INC E
   32          | T_DEC E
   33          | E T_INC
   34          | E T_DEC

   35 EXPR: LOGIC_EXPR

   36 LOGIC_EXPR: LOGIC_EXPR T_LOGOR AND_EXPR
   37           | AND_EXPR

   38 AND_EXPR: AND_EXPR T_LOGAND REL_EXPR
   39         | REL_EXPR

   40 REL_EXPR: REL_EXPR REL_OP E
   41         | E

   42 E: E '+' T
   43  | E '-' T
   44  | T

   45 T: T '*' F
   46  | T '/' F
   47  | F

   48 F: '(' EXPR ')'
   49  | '!' F
   50  | T_ID
   51  | T_NUM
   52  | T_STRLITERAL

   53 REL_OP: T_LESSEREQ
   54       | T_GREATEREQ
   55       | '<'
   56       | '>'
   57       | T_EQCOMP
   58       | T_NOTEQUAL

   59 $@2: ε

   60 $@3: ε

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' $@3 STMT '}'

   62 EMPTY_LISTVAR: LISTVAR
   63              | ε

   64 STMT: STMT_NO_BLOCK STMT
   65     | BLOCK STMT
   66     | ε

   67 STMT_NO_BLOCK: DECLR ';'
   68              | ASSGN ';'
   69              | UNARYEXPR ';'

   70 $@4: ε

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR ';' UNARYEXPR ')' HANDLER

   72 $@5: ε

   73 $@6: ε

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 '(' EXPR ')' ';'

   75 $@7: ε

   76 STMT_NO_BLOCK: T_IF $@7 '(' EXPR ')' BLOCK ELSE

   77 $@8: ε

   78 STMT_NO_BLOCK: T_RETURN $@8 EXPR ';'

   79 $@9: ε

   80 STMT_NO_BLOCK: T_WHILE $@9 '(' EXPR ')' HANDLER

   81 $@10: ε

   82 STMT_NO_BLOCK: T_BREAK $@10 ';'

   83 $@11: ε

   84 STMT_NO_BLOCK: T_CONTINUE $@11 ';'

   85 HANDLER: BLOCK
   86        | STMT_NO_BLOCK

   87 ELSE: T_ELSE BLOCK
   88     | ε

   89 $@12: ε

   90 BLOCK: '{' $@12 STMT '}'


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 49
    '(' (40) 48 61 71 74 76 80
    ')' (41) 48 61 71 74 76 80
    '*' (42) 45
    '+' (43) 42
    ',' (44) 9 27
    '-' (45) 43
    '/' (47) 46
    ';' (59) 5 6 67 68 69 71 74 78 82 84
    '<' (60) 3 55
    '=' (61) 21 22 23 24 25 26
    '>' (62) 3 56
    '[' (91) 13 14 23 24 25
    ']' (93) 13 14 23 24 25
    '{' (123) 30 61 90
    '}' (125) 30 61 90
    error (256)
    T_INT (258) 16
    T_CHAR (259) 19
    T_DOUBLE (260) 18
    T_WHILE (261) 74 80
    T_INC (262) 31 33
    T_DEC (263) 32 34
    T_OROR (264)
    T_ANDAND (265)
    T_EQCOMP (266) 57
    T_NOTEQUAL (267) 58
    T_GREATEREQ (268) 54
    T_LESSEREQ (269) 53
    T_LEFTSHIFT (270)
    T_RIGHTSHIFT (271)
    T_PRINTLN (272)
    T_STRING (273)
    T_FLOAT (274) 17
    T_BOOLEAN (275)
    T_IF (276) 76
    T_ELSE (277) 87
    T_STRLITERAL (278) 52
    T_DO (279) 74
    T_INCLUDE (280) 3
    T_HEADER (281) 3
    T_MAIN (282) 61
    T_ID (283) 12 13 21 22 23 24 25 26 50
    T_NUM (284) 51
    T_PRINTFF (285)
    T_SCANFF (286)
    T_VOID (287) 20
    T_RETURN (288) 78
    T_FOR (289) 71
    T_TRUE (290)
    T_FALSE (291)
    T_LOGAND (292) 38
    T_LOGOR (293) 36
    T_SQBRACK (294) 26
    T_BREAK (295) 82
    T_CONTINUE (296) 84
    T_CASE (297)
    T_SWITCH (298)
    T_DEFAULT (299)


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    START (62)
        on left: 1 3
        on right: 0
    $@1 (63)
        on left: 2
        on right: 3
    PROG (64)
        on left: 4 5 6 7
        on right: 1 3 4 5 6
    DECLR (65)
        on left: 8
        on right: 5 67 71
    LISTVAR (66)
        on left: 9 10
        on right: 8 9 62
    VAR (67)
        on left: 11 12 13
        on right: 9 10
    DIMS (68)
        on left: 14 15
        on right: 13 14 23 24 25
    TYPE (69)
        on left: 16 17 18 19 20
        on right: 8 61
    ASSGN (70)
        on left: 21 22 23 24 25 26
        on right: 6 11 68
    ARRELEM (71)
        on left: 27 28 29
        on right: 27 30
    ARRDEF (72)
        on left: 30
        on right: 25 26
    UNARYEXPR (73)
        on left: 31 32 33 34
        on right: 22 24 69 71
    EXPR (74)
        on left: 35
        on right: 13 14 21 23 24 25 27 28 48 71 74 76 78 80
    LOGIC_EXPR (75)
        on left: 36 37
        on right: 35 36
    AND_EXPR (76)
        on left: 38 39
        on right: 36 37 38
    REL_EXPR (77)
        on left: 40 41
        on right: 38 39 40
    E (78)
        on left: 42 43 44
        on right: 31 32 33 34 40 41 42 43
    T (79)
        on left: 45 46 47
        on right: 42 43 44 45 46
    F (80)
        on left: 48 49 50 51 52
        on right: 45 46 47 49
    REL_OP (81)
        on left: 53 54 55 56 57 58
        on right: 40
    MAIN (82)
        on left: 61
        on right: 4
    $@2 (83)
        on left: 59
        on right: 61
    $@3 (84)
        on left: 60
        on right: 61
    EMPTY_LISTVAR (85)
        on left: 62 63
        on right: 61
    STMT (86)
        on left: 64 65 66
        on right: 61 64 65 90
    STMT_NO_BLOCK (87)
        on left: 67 68 69 71 74 76 78 80 82 84
        on right: 64 86
    $@4 (88)
        on left: 70
        on right: 71
    $@5 (89)
        on left: 72
        on right: 74
    $@6 (90)
        on left: 73
        on right: 74
    $@7 (91)
        on left: 75
        on right: 76
    $@8 (92)
        on left: 77
        on right: 78
    $@9 (93)
        on left: 79
        on right: 80
    $@10 (94)
        on left: 81
        on right: 82
    $@11 (95)
        on left: 83
        on right: 84
    HANDLER (96)
        on left: 85 86
        on right: 71 80
    ELSE (97)
        on left: 87 88
        on right: 76
    BLOCK (98)
        on left: 90
        on right: 65 74 76 85 87
    $@12 (99)
        on left: 89
        on right: 90


State 0

    0 $accept: • START $end

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_VOID     shift, and go to state 7

    $default  reduce using rule 7 (PROG)

    START  go to state 8
    PROG   go to state 9
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 1

   16 TYPE: T_INT •

    $default  reduce using rule 16 (TYPE)


State 2

   19 TYPE: T_CHAR •

    $default  reduce using rule 19 (TYPE)


State 3

   18 TYPE: T_DOUBLE •

    $default  reduce using rule 18 (TYPE)


State 4

   17 TYPE: T_FLOAT •

    $default  reduce using rule 17 (TYPE)


State 5

    3 START: T_INCLUDE • '<' T_HEADER $@1 '>' PROG

    '<'  shift, and go to state 14


State 6

   21 ASSGN: T_ID • '=' EXPR
   22      | T_ID • '=' UNARYEXPR
   23      | T_ID • '[' EXPR ']' DIMS '=' EXPR
   24      | T_ID • '[' EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID • '[' EXPR ']' DIMS '=' ARRDEF
   26      | T_ID • T_SQBRACK '=' ARRDEF

    T_SQBRACK  shift, and go to state 15
    '['        shift, and go to state 16
    '='        shift, and go to state 17


State 7

   20 TYPE: T_VOID •

    $default  reduce using rule 20 (TYPE)


State 8

    0 $accept: START • $end

    $end  shift, and go to state 18


State 9

    1 START: PROG •

    $default  reduce using rule 1 (START)


State 10

    5 PROG: DECLR • ';' PROG

    ';'  shift, and go to state 19


State 11

    8 DECLR: TYPE • LISTVAR
   61 MAIN: TYPE • T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' $@3 STMT '}'

    T_MAIN  shift, and go to state 20
    T_ID    shift, and go to state 21

    LISTVAR  go to state 22
    VAR      go to state 23
    ASSGN    go to state 24


State 12

    6 PROG: ASSGN • ';' PROG

    ';'  shift, and go to state 25


State 13

    4 PROG: MAIN • PROG

    T_INT     shift, and go to state 1
    T_CHAR    shift, and go to state 2
    T_DOUBLE  shift, and go to state 3
    T_FLOAT   shift, and go to state 4
    T_ID      shift, and go to state 6
    T_VOID    shift, and go to state 7

    $default  reduce using rule 7 (PROG)

    PROG   go to state 26
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 14

    3 START: T_INCLUDE '<' • T_HEADER $@1 '>' PROG

    T_HEADER  shift, and go to state 27


State 15

   26 ASSGN: T_ID T_SQBRACK • '=' ARRDEF

    '='  shift, and go to state 28


State 16

   23 ASSGN: T_ID '[' • EXPR ']' DIMS '=' EXPR
   24      | T_ID '[' • EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID '[' • EXPR ']' DIMS '=' ARRDEF

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 34
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 17

   21 ASSGN: T_ID '=' • EXPR
   22      | T_ID '=' • UNARYEXPR

    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    UNARYEXPR   go to state 43
    EXPR        go to state 44
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 45
    T           go to state 39
    F           go to state 40


State 18

    0 $accept: START $end •

    $default  accept


State 19

    5 PROG: DECLR ';' • PROG

    T_INT     shift, and go to state 1
    T_CHAR    shift, and go to state 2
    T_DOUBLE  shift, and go to state 3
    T_FLOAT   shift, and go to state 4
    T_ID      shift, and go to state 6
    T_VOID    shift, and go to state 7

    $default  reduce using rule 7 (PROG)

    PROG   go to state 46
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 20

   61 MAIN: TYPE T_MAIN • $@2 '(' EMPTY_LISTVAR ')' '{' $@3 STMT '}'

    $default  reduce using rule 59 ($@2)

    $@2  go to state 47


State 21

   12 VAR: T_ID •
   13    | T_ID • '[' EXPR ']' DIMS
   21 ASSGN: T_ID • '=' EXPR
   22      | T_ID • '=' UNARYEXPR
   23      | T_ID • '[' EXPR ']' DIMS '=' EXPR
   24      | T_ID • '[' EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID • '[' EXPR ']' DIMS '=' ARRDEF
   26      | T_ID • T_SQBRACK '=' ARRDEF

    T_SQBRACK  shift, and go to state 15
    '['        shift, and go to state 48
    '='        shift, and go to state 17

    $default  reduce using rule 12 (VAR)


State 22

    8 DECLR: TYPE LISTVAR •
    9 LISTVAR: LISTVAR • ',' VAR

    ','  shift, and go to state 49

    $default  reduce using rule 8 (DECLR)


State 23

   10 LISTVAR: VAR •

    $default  reduce using rule 10 (LISTVAR)


State 24

   11 VAR: ASSGN •

    $default  reduce using rule 11 (VAR)


State 25

    6 PROG: ASSGN ';' • PROG

    T_INT     shift, and go to state 1
    T_CHAR    shift, and go to state 2
    T_DOUBLE  shift, and go to state 3
    T_FLOAT   shift, and go to state 4
    T_ID      shift, and go to state 6
    T_VOID    shift, and go to state 7

    $default  reduce using rule 7 (PROG)

    PROG   go to state 50
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 26

    4 PROG: MAIN PROG •

    $default  reduce using rule 4 (PROG)


State 27

    3 START: T_INCLUDE '<' T_HEADER • $@1 '>' PROG

    $default  reduce using rule 2 ($@1)

    $@1  go to state 51


State 28

   26 ASSGN: T_ID T_SQBRACK '=' • ARRDEF

    '{'  shift, and go to state 52

    ARRDEF  go to state 53


State 29

   52 F: T_STRLITERAL •

    $default  reduce using rule 52 (F)


State 30

   50 F: T_ID •

    $default  reduce using rule 50 (F)


State 31

   51 F: T_NUM •

    $default  reduce using rule 51 (F)


State 32

   48 F: '(' • EXPR ')'

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 54
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 33

   49 F: '!' • F

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    F  go to state 55


State 34

   23 ASSGN: T_ID '[' EXPR • ']' DIMS '=' EXPR
   24      | T_ID '[' EXPR • ']' DIMS '=' UNARYEXPR
   25      | T_ID '[' EXPR • ']' DIMS '=' ARRDEF

    ']'  shift, and go to state 56


State 35

   35 EXPR: LOGIC_EXPR •
   36 LOGIC_EXPR: LOGIC_EXPR • T_LOGOR AND_EXPR

    T_LOGOR  shift, and go to state 57

    $default  reduce using rule 35 (EXPR)


State 36

   37 LOGIC_EXPR: AND_EXPR •
   38 AND_EXPR: AND_EXPR • T_LOGAND REL_EXPR

    T_LOGAND  shift, and go to state 58

    $default  reduce using rule 37 (LOGIC_EXPR)


State 37

   39 AND_EXPR: REL_EXPR •
   40 REL_EXPR: REL_EXPR • REL_OP E

    T_EQCOMP     shift, and go to state 59
    T_NOTEQUAL   shift, and go to state 60
    T_GREATEREQ  shift, and go to state 61
    T_LESSEREQ   shift, and go to state 62
    '<'          shift, and go to state 63
    '>'          shift, and go to state 64

    $default  reduce using rule 39 (AND_EXPR)

    REL_OP  go to state 65


State 38

   41 REL_EXPR: E •
   42 E: E • '+' T
   43  | E • '-' T

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    $default  reduce using rule 41 (REL_EXPR)


State 39

   44 E: T •
   45 T: T • '*' F
   46  | T • '/' F

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69

    $default  reduce using rule 44 (E)


State 40

   47 T: F •

    $default  reduce using rule 47 (T)


State 41

   31 UNARYEXPR: T_INC • E

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    E  go to state 70
    T  go to state 39
    F  go to state 40


State 42

   32 UNARYEXPR: T_DEC • E

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    E  go to state 71
    T  go to state 39
    F  go to state 40


State 43

   22 ASSGN: T_ID '=' UNARYEXPR •

    $default  reduce using rule 22 (ASSGN)


State 44

   21 ASSGN: T_ID '=' EXPR •

    $default  reduce using rule 21 (ASSGN)


State 45

   33 UNARYEXPR: E • T_INC
   34          | E • T_DEC
   41 REL_EXPR: E •
   42 E: E • '+' T
   43  | E • '-' T

    T_INC  shift, and go to state 72
    T_DEC  shift, and go to state 73
    '+'    shift, and go to state 66
    '-'    shift, and go to state 67

    $default  reduce using rule 41 (REL_EXPR)


State 46

    5 PROG: DECLR ';' PROG •

    $default  reduce using rule 5 (PROG)


State 47

   61 MAIN: TYPE T_MAIN $@2 • '(' EMPTY_LISTVAR ')' '{' $@3 STMT '}'

    '('  shift, and go to state 74


State 48

   13 VAR: T_ID '[' • EXPR ']' DIMS
   23 ASSGN: T_ID '[' • EXPR ']' DIMS '=' EXPR
   24      | T_ID '[' • EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID '[' • EXPR ']' DIMS '=' ARRDEF

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 75
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 49

    9 LISTVAR: LISTVAR ',' • VAR

    T_ID  shift, and go to state 21

    VAR    go to state 76
    ASSGN  go to state 24


State 50

    6 PROG: ASSGN ';' PROG •

    $default  reduce using rule 6 (PROG)


State 51

    3 START: T_INCLUDE '<' T_HEADER $@1 • '>' PROG

    '>'  shift, and go to state 77


State 52

   30 ARRDEF: '{' • ARRELEM '}'

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 29 (ARRELEM)

    ARRELEM     go to state 78
    EXPR        go to state 79
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 53

   26 ASSGN: T_ID T_SQBRACK '=' ARRDEF •

    $default  reduce using rule 26 (ASSGN)


State 54

   48 F: '(' EXPR • ')'

    ')'  shift, and go to state 80


State 55

   49 F: '!' F •

    $default  reduce using rule 49 (F)


State 56

   23 ASSGN: T_ID '[' EXPR ']' • DIMS '=' EXPR
   24      | T_ID '[' EXPR ']' • DIMS '=' UNARYEXPR
   25      | T_ID '[' EXPR ']' • DIMS '=' ARRDEF

    '['  shift, and go to state 81

    $default  reduce using rule 15 (DIMS)

    DIMS  go to state 82


State 57

   36 LOGIC_EXPR: LOGIC_EXPR T_LOGOR • AND_EXPR

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    AND_EXPR  go to state 83
    REL_EXPR  go to state 37
    E         go to state 38
    T         go to state 39
    F         go to state 40


State 58

   38 AND_EXPR: AND_EXPR T_LOGAND • REL_EXPR

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    REL_EXPR  go to state 84
    E         go to state 38
    T         go to state 39
    F         go to state 40


State 59

   57 REL_OP: T_EQCOMP •

    $default  reduce using rule 57 (REL_OP)


State 60

   58 REL_OP: T_NOTEQUAL •

    $default  reduce using rule 58 (REL_OP)


State 61

   54 REL_OP: T_GREATEREQ •

    $default  reduce using rule 54 (REL_OP)


State 62

   53 REL_OP: T_LESSEREQ •

    $default  reduce using rule 53 (REL_OP)


State 63

   55 REL_OP: '<' •

    $default  reduce using rule 55 (REL_OP)


State 64

   56 REL_OP: '>' •

    $default  reduce using rule 56 (REL_OP)


State 65

   40 REL_EXPR: REL_EXPR REL_OP • E

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    E  go to state 85
    T  go to state 39
    F  go to state 40


State 66

   42 E: E '+' • T

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    T  go to state 86
    F  go to state 40


State 67

   43 E: E '-' • T

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    T  go to state 87
    F  go to state 40


State 68

   45 T: T '*' • F

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    F  go to state 88


State 69

   46 T: T '/' • F

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    F  go to state 89


State 70

   31 UNARYEXPR: T_INC E •
   42 E: E • '+' T
   43  | E • '-' T

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    $default  reduce using rule 31 (UNARYEXPR)


State 71

   32 UNARYEXPR: T_DEC E •
   42 E: E • '+' T
   43  | E • '-' T

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    $default  reduce using rule 32 (UNARYEXPR)


State 72

   33 UNARYEXPR: E T_INC •

    $default  reduce using rule 33 (UNARYEXPR)


State 73

   34 UNARYEXPR: E T_DEC •

    $default  reduce using rule 34 (UNARYEXPR)


State 74

   61 MAIN: TYPE T_MAIN $@2 '(' • EMPTY_LISTVAR ')' '{' $@3 STMT '}'

    T_ID  shift, and go to state 21

    $default  reduce using rule 63 (EMPTY_LISTVAR)

    LISTVAR        go to state 90
    VAR            go to state 23
    ASSGN          go to state 24
    EMPTY_LISTVAR  go to state 91


State 75

   13 VAR: T_ID '[' EXPR • ']' DIMS
   23 ASSGN: T_ID '[' EXPR • ']' DIMS '=' EXPR
   24      | T_ID '[' EXPR • ']' DIMS '=' UNARYEXPR
   25      | T_ID '[' EXPR • ']' DIMS '=' ARRDEF

    ']'  shift, and go to state 92


State 76

    9 LISTVAR: LISTVAR ',' VAR •

    $default  reduce using rule 9 (LISTVAR)


State 77

    3 START: T_INCLUDE '<' T_HEADER $@1 '>' • PROG

    T_INT     shift, and go to state 1
    T_CHAR    shift, and go to state 2
    T_DOUBLE  shift, and go to state 3
    T_FLOAT   shift, and go to state 4
    T_ID      shift, and go to state 6
    T_VOID    shift, and go to state 7

    $default  reduce using rule 7 (PROG)

    PROG   go to state 93
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 78

   30 ARRDEF: '{' ARRELEM • '}'

    '}'  shift, and go to state 94


State 79

   27 ARRELEM: EXPR • ',' ARRELEM
   28        | EXPR •

    ','  shift, and go to state 95

    $default  reduce using rule 28 (ARRELEM)


State 80

   48 F: '(' EXPR ')' •

    $default  reduce using rule 48 (F)


State 81

   14 DIMS: '[' • EXPR ']' DIMS

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 96
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 82

   23 ASSGN: T_ID '[' EXPR ']' DIMS • '=' EXPR
   24      | T_ID '[' EXPR ']' DIMS • '=' UNARYEXPR
   25      | T_ID '[' EXPR ']' DIMS • '=' ARRDEF

    '='  shift, and go to state 97


State 83

   36 LOGIC_EXPR: LOGIC_EXPR T_LOGOR AND_EXPR •
   38 AND_EXPR: AND_EXPR • T_LOGAND REL_EXPR

    T_LOGAND  shift, and go to state 58

    $default  reduce using rule 36 (LOGIC_EXPR)


State 84

   38 AND_EXPR: AND_EXPR T_LOGAND REL_EXPR •
   40 REL_EXPR: REL_EXPR • REL_OP E

    T_EQCOMP     shift, and go to state 59
    T_NOTEQUAL   shift, and go to state 60
    T_GREATEREQ  shift, and go to state 61
    T_LESSEREQ   shift, and go to state 62
    '<'          shift, and go to state 63
    '>'          shift, and go to state 64

    $default  reduce using rule 38 (AND_EXPR)

    REL_OP  go to state 65


State 85

   40 REL_EXPR: REL_EXPR REL_OP E •
   42 E: E • '+' T
   43  | E • '-' T

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    $default  reduce using rule 40 (REL_EXPR)


State 86

   42 E: E '+' T •
   45 T: T • '*' F
   46  | T • '/' F

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69

    $default  reduce using rule 42 (E)


State 87

   43 E: E '-' T •
   45 T: T • '*' F
   46  | T • '/' F

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69

    $default  reduce using rule 43 (E)


State 88

   45 T: T '*' F •

    $default  reduce using rule 45 (T)


State 89

   46 T: T '/' F •

    $default  reduce using rule 46 (T)


State 90

    9 LISTVAR: LISTVAR • ',' VAR
   62 EMPTY_LISTVAR: LISTVAR •

    ','  shift, and go to state 49

    $default  reduce using rule 62 (EMPTY_LISTVAR)


State 91

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR • ')' '{' $@3 STMT '}'

    ')'  shift, and go to state 98


State 92

   13 VAR: T_ID '[' EXPR ']' • DIMS
   23 ASSGN: T_ID '[' EXPR ']' • DIMS '=' EXPR
   24      | T_ID '[' EXPR ']' • DIMS '=' UNARYEXPR
   25      | T_ID '[' EXPR ']' • DIMS '=' ARRDEF

    '['  shift, and go to state 81

    $default  reduce using rule 15 (DIMS)

    DIMS  go to state 99


State 93

    3 START: T_INCLUDE '<' T_HEADER $@1 '>' PROG •

    $default  reduce using rule 3 (START)


State 94

   30 ARRDEF: '{' ARRELEM '}' •

    $default  reduce using rule 30 (ARRDEF)


State 95

   27 ARRELEM: EXPR ',' • ARRELEM

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 29 (ARRELEM)

    ARRELEM     go to state 100
    EXPR        go to state 79
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 96

   14 DIMS: '[' EXPR • ']' DIMS

    ']'  shift, and go to state 101


State 97

   23 ASSGN: T_ID '[' EXPR ']' DIMS '=' • EXPR
   24      | T_ID '[' EXPR ']' DIMS '=' • UNARYEXPR
   25      | T_ID '[' EXPR ']' DIMS '=' • ARRDEF

    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '{'           shift, and go to state 52
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    ARRDEF      go to state 102
    UNARYEXPR   go to state 103
    EXPR        go to state 104
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 45
    T           go to state 39
    F           go to state 40


State 98

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' • '{' $@3 STMT '}'

    '{'  shift, and go to state 105


State 99

   13 VAR: T_ID '[' EXPR ']' DIMS •
   23 ASSGN: T_ID '[' EXPR ']' DIMS • '=' EXPR
   24      | T_ID '[' EXPR ']' DIMS • '=' UNARYEXPR
   25      | T_ID '[' EXPR ']' DIMS • '=' ARRDEF

    '='  shift, and go to state 97

    $default  reduce using rule 13 (VAR)


State 100

   27 ARRELEM: EXPR ',' ARRELEM •

    $default  reduce using rule 27 (ARRELEM)


State 101

   14 DIMS: '[' EXPR ']' • DIMS

    '['  shift, and go to state 81

    $default  reduce using rule 15 (DIMS)

    DIMS  go to state 106


State 102

   25 ASSGN: T_ID '[' EXPR ']' DIMS '=' ARRDEF •

    $default  reduce using rule 25 (ASSGN)


State 103

   24 ASSGN: T_ID '[' EXPR ']' DIMS '=' UNARYEXPR •

    $default  reduce using rule 24 (ASSGN)


State 104

   23 ASSGN: T_ID '[' EXPR ']' DIMS '=' EXPR •

    $default  reduce using rule 23 (ASSGN)


State 105

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' • $@3 STMT '}'

    $default  reduce using rule 60 ($@3)

    $@3  go to state 107


State 106

   14 DIMS: '[' EXPR ']' DIMS •

    $default  reduce using rule 14 (DIMS)


State 107

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' $@3 • STMT '}'

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 66 (STMT)

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT           go to state 122
    STMT_NO_BLOCK  go to state 123
    BLOCK          go to state 124


State 108

   80 STMT_NO_BLOCK: T_WHILE • $@9 '(' EXPR ')' HANDLER

    $default  reduce using rule 79 ($@9)

    $@9  go to state 125


State 109

   76 STMT_NO_BLOCK: T_IF • $@7 '(' EXPR ')' BLOCK ELSE

    $default  reduce using rule 75 ($@7)

    $@7  go to state 126


State 110

   74 STMT_NO_BLOCK: T_DO • $@5 BLOCK T_WHILE $@6 '(' EXPR ')' ';'

    $default  reduce using rule 72 ($@5)

    $@5  go to state 127


State 111

   21 ASSGN: T_ID • '=' EXPR
   22      | T_ID • '=' UNARYEXPR
   23      | T_ID • '[' EXPR ']' DIMS '=' EXPR
   24      | T_ID • '[' EXPR ']' DIMS '=' UNARYEXPR
   25      | T_ID • '[' EXPR ']' DIMS '=' ARRDEF
   26      | T_ID • T_SQBRACK '=' ARRDEF
   50 F: T_ID •

    T_SQBRACK  shift, and go to state 15
    '['        shift, and go to state 16
    '='        shift, and go to state 17

    $default  reduce using rule 50 (F)


State 112

   78 STMT_NO_BLOCK: T_RETURN • $@8 EXPR ';'

    $default  reduce using rule 77 ($@8)

    $@8  go to state 128


State 113

   71 STMT_NO_BLOCK: T_FOR • $@4 '(' DECLR ';' EXPR ';' UNARYEXPR ')' HANDLER

    $default  reduce using rule 70 ($@4)

    $@4  go to state 129


State 114

   82 STMT_NO_BLOCK: T_BREAK • $@10 ';'

    $default  reduce using rule 81 ($@10)

    $@10  go to state 130


State 115

   84 STMT_NO_BLOCK: T_CONTINUE • $@11 ';'

    $default  reduce using rule 83 ($@11)

    $@11  go to state 131


State 116

   90 BLOCK: '{' • $@12 STMT '}'

    $default  reduce using rule 89 ($@12)

    $@12  go to state 132


State 117

   67 STMT_NO_BLOCK: DECLR • ';'

    ';'  shift, and go to state 133


State 118

    8 DECLR: TYPE • LISTVAR

    T_ID  shift, and go to state 21

    LISTVAR  go to state 22
    VAR      go to state 23
    ASSGN    go to state 24


State 119

   68 STMT_NO_BLOCK: ASSGN • ';'

    ';'  shift, and go to state 134


State 120

   69 STMT_NO_BLOCK: UNARYEXPR • ';'

    ';'  shift, and go to state 135


State 121

   33 UNARYEXPR: E • T_INC
   34          | E • T_DEC
   42 E: E • '+' T
   43  | E • '-' T

    T_INC  shift, and go to state 72
    T_DEC  shift, and go to state 73
    '+'    shift, and go to state 66
    '-'    shift, and go to state 67


State 122

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' $@3 STMT • '}'

    '}'  shift, and go to state 136


State 123

   64 STMT: STMT_NO_BLOCK • STMT

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 66 (STMT)

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT           go to state 137
    STMT_NO_BLOCK  go to state 123
    BLOCK          go to state 124


State 124

   65 STMT: BLOCK • STMT

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 66 (STMT)

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT           go to state 138
    STMT_NO_BLOCK  go to state 123
    BLOCK          go to state 124


State 125

   80 STMT_NO_BLOCK: T_WHILE $@9 • '(' EXPR ')' HANDLER

    '('  shift, and go to state 139


State 126

   76 STMT_NO_BLOCK: T_IF $@7 • '(' EXPR ')' BLOCK ELSE

    '('  shift, and go to state 140


State 127

   74 STMT_NO_BLOCK: T_DO $@5 • BLOCK T_WHILE $@6 '(' EXPR ')' ';'

    '{'  shift, and go to state 116

    BLOCK  go to state 141


State 128

   78 STMT_NO_BLOCK: T_RETURN $@8 • EXPR ';'

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 142
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 129

   71 STMT_NO_BLOCK: T_FOR $@4 • '(' DECLR ';' EXPR ';' UNARYEXPR ')' HANDLER

    '('  shift, and go to state 143


State 130

   82 STMT_NO_BLOCK: T_BREAK $@10 • ';'

    ';'  shift, and go to state 144


State 131

   84 STMT_NO_BLOCK: T_CONTINUE $@11 • ';'

    ';'  shift, and go to state 145


State 132

   90 BLOCK: '{' $@12 • STMT '}'

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    $default  reduce using rule 66 (STMT)

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT           go to state 146
    STMT_NO_BLOCK  go to state 123
    BLOCK          go to state 124


State 133

   67 STMT_NO_BLOCK: DECLR ';' •

    $default  reduce using rule 67 (STMT_NO_BLOCK)


State 134

   68 STMT_NO_BLOCK: ASSGN ';' •

    $default  reduce using rule 68 (STMT_NO_BLOCK)


State 135

   69 STMT_NO_BLOCK: UNARYEXPR ';' •

    $default  reduce using rule 69 (STMT_NO_BLOCK)


State 136

   61 MAIN: TYPE T_MAIN $@2 '(' EMPTY_LISTVAR ')' '{' $@3 STMT '}' •

    $default  reduce using rule 61 (MAIN)


State 137

   64 STMT: STMT_NO_BLOCK STMT •

    $default  reduce using rule 64 (STMT)


State 138

   65 STMT: BLOCK STMT •

    $default  reduce using rule 65 (STMT)


State 139

   80 STMT_NO_BLOCK: T_WHILE $@9 '(' • EXPR ')' HANDLER

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 147
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 140

   76 STMT_NO_BLOCK: T_IF $@7 '(' • EXPR ')' BLOCK ELSE

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 148
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 141

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK • T_WHILE $@6 '(' EXPR ')' ';'

    T_WHILE  shift, and go to state 149


State 142

   78 STMT_NO_BLOCK: T_RETURN $@8 EXPR • ';'

    ';'  shift, and go to state 150


State 143

   71 STMT_NO_BLOCK: T_FOR $@4 '(' • DECLR ';' EXPR ';' UNARYEXPR ')' HANDLER

    T_INT     shift, and go to state 1
    T_CHAR    shift, and go to state 2
    T_DOUBLE  shift, and go to state 3
    T_FLOAT   shift, and go to state 4
    T_VOID    shift, and go to state 7

    DECLR  go to state 151
    TYPE   go to state 118


State 144

   82 STMT_NO_BLOCK: T_BREAK $@10 ';' •

    $default  reduce using rule 82 (STMT_NO_BLOCK)


State 145

   84 STMT_NO_BLOCK: T_CONTINUE $@11 ';' •

    $default  reduce using rule 84 (STMT_NO_BLOCK)


State 146

   90 BLOCK: '{' $@12 STMT • '}'

    '}'  shift, and go to state 152


State 147

   80 STMT_NO_BLOCK: T_WHILE $@9 '(' EXPR • ')' HANDLER

    ')'  shift, and go to state 153


State 148

   76 STMT_NO_BLOCK: T_IF $@7 '(' EXPR • ')' BLOCK ELSE

    ')'  shift, and go to state 154


State 149

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE • $@6 '(' EXPR ')' ';'

    $default  reduce using rule 73 ($@6)

    $@6  go to state 155


State 150

   78 STMT_NO_BLOCK: T_RETURN $@8 EXPR ';' •

    $default  reduce using rule 78 (STMT_NO_BLOCK)


State 151

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR • ';' EXPR ';' UNARYEXPR ')' HANDLER

    ';'  shift, and go to state 156


State 152

   90 BLOCK: '{' $@12 STMT '}' •

    $default  reduce using rule 90 (BLOCK)


State 153

   80 STMT_NO_BLOCK: T_WHILE $@9 '(' EXPR ')' • HANDLER

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT_NO_BLOCK  go to state 157
    HANDLER        go to state 158
    BLOCK          go to state 159


State 154

   76 STMT_NO_BLOCK: T_IF $@7 '(' EXPR ')' • BLOCK ELSE

    '{'  shift, and go to state 116

    BLOCK  go to state 160


State 155

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 • '(' EXPR ')' ';'

    '('  shift, and go to state 161


State 156

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' • EXPR ';' UNARYEXPR ')' HANDLER

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 162
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 157

   86 HANDLER: STMT_NO_BLOCK •

    $default  reduce using rule 86 (HANDLER)


State 158

   80 STMT_NO_BLOCK: T_WHILE $@9 '(' EXPR ')' HANDLER •

    $default  reduce using rule 80 (STMT_NO_BLOCK)


State 159

   85 HANDLER: BLOCK •

    $default  reduce using rule 85 (HANDLER)


State 160

   76 STMT_NO_BLOCK: T_IF $@7 '(' EXPR ')' BLOCK • ELSE

    T_ELSE  shift, and go to state 163

    $default  reduce using rule 88 (ELSE)

    ELSE  go to state 164


State 161

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 '(' • EXPR ')' ';'

    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    EXPR        go to state 165
    LOGIC_EXPR  go to state 35
    AND_EXPR    go to state 36
    REL_EXPR    go to state 37
    E           go to state 38
    T           go to state 39
    F           go to state 40


State 162

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR • ';' UNARYEXPR ')' HANDLER

    ';'  shift, and go to state 166


State 163

   87 ELSE: T_ELSE • BLOCK

    '{'  shift, and go to state 116

    BLOCK  go to state 167


State 164

   76 STMT_NO_BLOCK: T_IF $@7 '(' EXPR ')' BLOCK ELSE •

    $default  reduce using rule 76 (STMT_NO_BLOCK)


State 165

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 '(' EXPR • ')' ';'

    ')'  shift, and go to state 168


State 166

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR ';' • UNARYEXPR ')' HANDLER

    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_STRLITERAL  shift, and go to state 29
    T_ID          shift, and go to state 30
    T_NUM         shift, and go to state 31
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    UNARYEXPR  go to state 169
    E          go to state 121
    T          go to state 39
    F          go to state 40


State 167

   87 ELSE: T_ELSE BLOCK •

    $default  reduce using rule 87 (ELSE)


State 168

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 '(' EXPR ')' • ';'

    ';'  shift, and go to state 170


State 169

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR ';' UNARYEXPR • ')' HANDLER

    ')'  shift, and go to state 171


State 170

   74 STMT_NO_BLOCK: T_DO $@5 BLOCK T_WHILE $@6 '(' EXPR ')' ';' •

    $default  reduce using rule 74 (STMT_NO_BLOCK)


State 171

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR ';' UNARYEXPR ')' • HANDLER

    T_INT         shift, and go to state 1
    T_CHAR        shift, and go to state 2
    T_DOUBLE      shift, and go to state 3
    T_WHILE       shift, and go to state 108
    T_INC         shift, and go to state 41
    T_DEC         shift, and go to state 42
    T_FLOAT       shift, and go to state 4
    T_IF          shift, and go to state 109
    T_STRLITERAL  shift, and go to state 29
    T_DO          shift, and go to state 110
    T_ID          shift, and go to state 111
    T_NUM         shift, and go to state 31
    T_VOID        shift, and go to state 7
    T_RETURN      shift, and go to state 112
    T_FOR         shift, and go to state 113
    T_BREAK       shift, and go to state 114
    T_CONTINUE    shift, and go to state 115
    '{'           shift, and go to state 116
    '('           shift, and go to state 32
    '!'           shift, and go to state 33

    DECLR          go to state 117
    TYPE           go to state 118
    ASSGN          go to state 119
    UNARYEXPR      go to state 120
    E              go to state 121
    T              go to state 39
    F              go to state 40
    STMT_NO_BLOCK  go to state 157
    HANDLER        go to state 172
    BLOCK          go to state 159


State 172

   71 STMT_NO_BLOCK: T_FOR $@4 '(' DECLR ';' EXPR ';' UNARYEXPR ')' HANDLER •

    $default  reduce using rule 71 (STMT_NO_BLOCK)
